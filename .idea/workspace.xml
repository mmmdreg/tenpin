<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="c63a6c58-4654-4cb8-a6dd-918d5b3c287d" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="testRunner" value="GRADLE" />
    <option name="delegatedBuild" value="true" />
  </component>
  <component name="ElmWorkspace">
    <elmProjects />
    <settings elmCompilerPath="" elmFormatPath="" elmTestPath="" isElmFormatOnSaveEnabled="false" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/tenpin/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="730">
              <caret line="85" column="59" lean-forward="true" selection-start-line="85" selection-start-column="59" selection-end-line="85" selection-end-column="59" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>(update :frames conj [])</find>
      <find>first</find>
      <find>3</find>
      <find>1</find>
      <find>prn</find>
    </findStrings>
    <replaceStrings>
      <replace>(update :current-frame inc)</replace>
      <replace>head</replace>
      <replace>4</replace>
      <replace>0</replace>
    </replaceStrings>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/tenpin/core.clj" />
        <option value="$PROJECT_DIR$/test/tenpin/core_test.clj" />
        <option value="$PROJECT_DIR$/README.md" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="5" />
    <option name="y" value="23" />
    <option name="width" value="1675" />
    <option name="height" value="1027" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="tenpin" type="b2602c69:ProjectViewProjectNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="tenpin" type="b2602c69:ProjectViewProjectNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="tenpin" type="b2602c69:ProjectViewProjectNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="tenpin" type="b2602c69:ProjectViewProjectNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="tenpin" type="b2602c69:ProjectViewProjectNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="tenpin" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
  </component>
  <component name="ReplState" timestamp="1568780707631">{:repl-history {:ide [], :local [{:command &quot;(defn rolls-&gt;frames\n    \&quot;Given a list of `rolls`, partitions into a vector of frames.\&quot;\n    [rolls]\n    (-&gt;&gt; (reduce (fn [acc x]\n                   (let [[head &amp; rest] acc]\n                     (cond\n                       ; Do not add anything if existing frame has is a 10\n                       (and (= 1 (count head)) (= 10 (first head))) (conj acc [x])\n\n                       ; Add a frame pair to the list\n                       (= 1 (count head)) (conj rest (conj head x))\n\n                       ; Start a new frame\n                       :else (conj acc [x])))) (list) rolls)\n         reverse\n         (partition-all 10)\n         (zipmap [:frames :extras])\n         (map (fn [[k v]] [k (vec v)]))\n         (into {})))&quot;, :offset 726, :ns &quot;tenpin.core&quot;} {:command &quot;(rolls-&gt;frames [1\n                  2\n                  10\n                  9\n                  1\n                  3\n                  2\n                  7\n                  10\n                  10\n                  10\n                  10\n                  10\n                  10\n                  10\n                  10\n                  10\n                  10\n                  ])&quot;, :offset 389, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n    [s]\n    (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n      \n      (prn (= (count frames) 10) (count frames))\n      (prn (every? #(or (= [10] %)\n                        (= 2 (count %))) frames))\n      (prn (&gt; (count (:rolls s)) (apply max (map :roll (:bonuses s)))) (count (:rolls s)) (apply max (map :roll (:bonuses s))))\n      (and (= (count frames) 10)\n           (or (= [10] (peek frames))\n               (= 2 (count (peek frames))))\n           (&gt; (count (:rolls s)) (apply max (map :roll (:bonuses s)))))))&quot;, :offset 541, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll3\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (cond\n        ; Past the last frame\n        (seq extras)\n        s'\n\n        ; Strike\n        (= [10] (peek frames))\n        (-&gt; s'\n            (update :bonuses conj {:frame current-frame :roll (count (:rolls s'))})\n            (update :bonuses conj {:frame current-frame :roll (inc (count (:rolls s')))}))\n\n\n        ; Spare\n        (= 10 (apply + (peek frames)))\n        (-&gt; s'\n            (update :bonuses conj {:frame current-frame :roll (count (:rolls s'))})\n            (update :bonuses conj {:frame current-frame :roll (inc (count (:rolls s')))}))\n\n\n        :else s')))&quot;, :offset 875, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; state3\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 9)\n      (roll3 0)\n      ;(roll3 10)\n      ;(roll3 10)\n      )&quot;, :offset 239, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; state3\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 9)\n      (roll3 1)\n      ;(roll3 10)\n      ;(roll3 10)\n      )&quot;, :offset 239, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll3\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (cond\n        ; Past the last frame\n        (seq extras)\n        s'\n\n        ; Strike\n        (= [10] (peek frames))\n        (-&gt; s'\n            (update :bonuses conj {:frame current-frame :roll (count (:rolls s'))})\n            (update :bonuses conj {:frame current-frame :roll (inc (count (:rolls s')))}))\n\n\n        ; Spare\n        (= 10 (apply + (peek frames)))\n        (-&gt; s'\n            (update :bonuses conj {:frame current-frame :roll (count (:rolls s'))})\n            )\n\n\n        :else s')))&quot;, :offset 798, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (cond\n        ; Past the last frame\n        (seq extras)\n        s'\n\n        ; Strike\n        (= [10] (peek frames))\n        (-&gt; s'\n            (update :bonuses conj {:frame current-frame :roll (count (:rolls s'))})\n            (update :bonuses conj {:frame current-frame :roll (inc (count (:rolls s')))}))\n\n\n        ; Spare\n        (= 10 (apply + (peek frames)))\n        (update s' :bonuses conj {:frame current-frame :roll (count (:rolls s'))})\n\n\n        :else s')))&quot;, :offset 768, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (cond\n        ; Past the last frame\n        (seq extras)\n        s'\n\n        ; Strike\n        (= [10] (peek frames))\n        (-&gt; s'\n            (update-in [:bonuses current-frame] conj (count (:rolls s')))\n            (update-in [:bonuses current-frame] conj (inc (count (:rolls s')))))\n\n\n        ; Spare\n        (= 10 (apply + (peek frames)))\n        (update-in s' [:bonuses current-frame] conj (count (:rolls s')))\n\n\n        :else s')))&quot;, :offset 738, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; state3\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 10)\n      (roll3 9)\n      (roll3 1)\n      (roll3 10)\n      ;(roll3 10)\n      )&quot;, :offset 238, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (let [res (cond\n                  ; Past the last frame\n                  (seq extras)\n                  s'\n\n                  ; Strike\n                  (= [10] (peek frames))\n                  (-&gt; s'\n                      (update-in [:bonuses current-frame] conj (count (:rolls s')))\n                      (update-in [:bonuses current-frame] conj (inc (count (:rolls s')))))\n\n\n                  ; Spare\n                  (= 10 (apply + (peek frames)))\n                  (update-in s' [:bonuses current-frame] conj (count (:rolls s')))\n\n\n                  :else s')]\n        \n        (prn res)\n        res)))&quot;, :offset 909, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (let [res (cond\n                  ; Past the last frame\n                  (seq extras)\n                  s'\n\n                  ; Strike\n                  (= [10] (peek frames))\n                  (update-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n\n                  ; Spare\n                  (= 10 (apply + (peek frames)))\n                  (update-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n\n                  :else s')]\n        \n        (prn res)\n        res)))&quot;, :offset 812, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\&quot;\n    [s n]\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (let [res (cond\n                  ; Past the last frame\n                  (seq extras)\n                  s'\n\n                  ; Strike\n                  (= [10] (peek frames))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n\n                  ; Spare\n                  (= 10 (apply + (peek frames)))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n\n                  :else s')]\n        \n        (prn res)\n        res)))&quot;, :offset 810, :ns &quot;tenpin.core&quot;} {:command &quot;(:bonuses res)&quot;, :offset 14, :ns &quot;tenpin.core&quot;} {:command &quot;(map vals (:bonuses res))&quot;, :offset 25, :ns &quot;tenpin.core&quot;} {:command &quot;(map val (:bonuses res))&quot;, :offset 24, :ns &quot;tenpin.core&quot;} {:command &quot;(mapcat identity (:bonuses res))&quot;, :offset 32, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete4?\n    [s]\n    (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n\n      (and (= (count frames) 10)\n           (or (= [10] (peek frames))\n               (= 2 (count (peek frames))))\n           (&gt; (count (:rolls s)) (apply max (mapcat identity (:bonuses s)))))))&quot;, :offset 280, :ns &quot;tenpin.core&quot;} {:command &quot;(game-complete4? res)&quot;, :offset 21, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n    \n    Throws an error if game is already complete.\&quot;\n    [s n]\n    {:pre [(not (game-complete? s))]}\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (let [res (cond\n                  ; Past the last frame\n                  (seq extras)\n                  s'\n\n                  ; Strike\n                  (= [10] (peek frames))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n                  \n                  ; Spare\n                  (= 10 (apply + (peek frames)))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n                  \n                  :else s')]\n\n        (prn res)\n        res)))&quot;, :offset 928, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n    \n    Throws an error if game is already complete.\&quot;\n    [s n]\n    {:pre [(not (game-complete4? s))]}\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (let [res (cond\n                  ; Past the last frame\n                  (seq extras)\n                  s'\n\n                  ; Strike\n                  (= [10] (peek frames))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n                  \n                  ; Spare\n                  (= 10 (apply + (peek frames)))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n                  \n                  :else s')]\n\n        (prn res)\n        res)))&quot;, :offset 929, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; state3\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 9)\n      (roll4 1)\n      (roll4 10)\n      ;(roll3 10)\n      )&quot;, :offset 238, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n    \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n    Throws an error if game is already complete.\&quot;\n    [s n]\n    \n    {:pre [(not (game-complete4? s))]}\n    (prn \&quot;COMPLETE\&quot; (game-complete4? s))\n    (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n          current-frame (dec (count frames))\n          _ (prn frames)\n          s' (-&gt; s\n                 (update :rolls conj n))]\n\n      (let [res (cond\n                  ; Past the last frame\n                  (seq extras)\n                  s'\n\n                  ; Strike\n                  (= [10] (peek frames))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n                  ; Spare\n                  (= 10 (apply + (peek frames)))\n                  (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n                  :else s')]\n\n        (prn res)\n        res)))&quot;, :offset 935, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; state3\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 9)\n      (roll4 1)\n      (roll4 10)\n      (roll3 10)\n      )&quot;, :offset 237, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; state3\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 10)\n      (roll4 9)\n      (roll4 1)\n      (roll4 10)\n      (roll4 10)\n      )&quot;, :offset 237, :ns &quot;tenpin.core&quot;} {:command &quot;(assoc [] 5 :moo)&quot;, :offset 17, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete4? s))]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses (keyword current-frame)] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses (keyword current-frame)] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 683, :ns &quot;tenpin.core&quot;} {:command &quot;(def initial-state\n  \&quot;We only track the minimum amount of state:\n  `rolls` are the numerical value of each roll\n  `bonuses` \&quot;\n  {:rolls   []\n   :bonuses {}})&quot;, :offset 157, :ns &quot;tenpin.core&quot;} {:command &quot;(defn rolls-&gt;frames\n  \&quot;Given a list of `rolls`, returns a map of\n  `frames` - a vector of at most 10 1-2 element tuples\n  `extras` - a similar vector representing all extra rolls following the actual frames of a game.\&quot;\n  [rolls]\n  (-&gt;&gt; (reduce (fn [acc x]\n                 (let [[head &amp; rest] acc]\n                   (cond\n                     ; Do not add anything if existing frame has is a 10\n                     (and (= 1 (count head)) (= 10 (first head))) (conj acc [x])\n\n                     ; Add a frame pair to the list\n                     (= 1 (count head)) (conj rest (conj head x))\n\n                     ; Start a new frame\n                     :else (conj acc [x])))) (list) rolls)\n       reverse\n       (partition-all 10)\n       (zipmap [:frames :extras])\n       (map (fn [[k v]] [k (vec v)]))\n       (into {})))&quot;, :offset 828, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat identity (:bonuses s)))))))&quot;, :offset 432, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll4\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses (keyword current-frame)] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses (keyword current-frame)] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 682, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses (keyword current-frame)] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses (keyword current-frame)] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 681, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4))&quot;, :offset 32, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4)\n    (roll 4)\n    )&quot;, :offset 50, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 661, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4)\n    (roll 4)\n    (roll 9)\n    (roll 1)\n    (roll 10)\n    )&quot;, :offset 90, :ns &quot;tenpin.core&quot;} {:command &quot;(def initial-state\n  \&quot;We only track the minimum amount of state:\n  `rolls` are the numerical value of each roll\n  `bonuses` a map of frame index to a vector of row indexes from which to draw bonus points.\n  \n  e.g. rolling a 10 (strike) in the first frame will yield {:rolls [10], :bonuses {0 [1 2]}\&quot;\n  {:rolls   []\n   :bonuses {}})&quot;, :offset 332, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score \n  [s]\n  (prn \&quot;S\&quot; s)\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 229, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score \n  [s]\n  (prn \&quot;S\&quot; s)\n  (prn \&quot;S\&quot; (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res))))))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 308, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score \n  [s]\n  (prn \&quot;S\&quot; s)\n  (prn \&quot;S\&quot; (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res))))))\n  (prn \&quot;S\&quot; (-&gt;&gt; (:bonuses s)\n                (mapcat (fn [[_ rolls]] rolls))\n                (map #(get (:rolls s) %))\n                (apply +)))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 455, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score \n  [s]\n  (prn \&quot;S\&quot; s)\n  (prn \&quot;S\&quot; (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res))))))\n  (prn \&quot;S\&quot; (-&gt;&gt; (:bonuses s)\n                (mapcat (fn [[_ rolls]] rolls))\n                #_(map #(get (:rolls s) %))\n                #_(apply +)))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 459, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4)\n    (roll 4)\n    (roll 9)\n    (roll 1)\n    (roll 10)\n    score\n    )&quot;, :offset 100, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score \n  [s]\n  {:pre [(game-complete? s)]}\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 245, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4)\n    (roll 4)\n    (roll 9)\n    (roll 1)\n    (roll 10)\n    (roll 1)\n    (roll 1)\n    score\n    )&quot;, :offset 126, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4)\n    (roll 4)\n    (roll 9)\n    (roll 1)\n    (roll 10)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    score\n    )&quot;, :offset 191, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 4)\n    (roll 4)\n    (roll 9)\n    (roll 1)\n    (roll 10)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    (roll 1)\n    score\n    )&quot;, :offset 204, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    score\n    )&quot;, :offset 216, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score \n  [s]\n  #_{:pre [(game-complete? s)]}\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 247, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn (count (:rolls s)) (apply max (mapcat identity (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat identity (:bonuses s)))))))&quot;, :offset 540, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n;(prn (count (:rolls s)) (apply max (mapcat identity (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat identity (:bonuses s)))))))&quot;, :offset 541, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n;(prn (count (:rolls s)) (apply max (mapcat identity (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat vals (:bonuses s)))))))&quot;, :offset 537, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat vals (:bonuses s)))))))&quot;, :offset 532, :ns &quot;tenpin.core&quot;} {:command &quot;(vals initial-state)&quot;, :offset 20, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat vals (:bonuses s)))))))&quot;, :offset 561, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (&gt; (count (:rolls s)) (apply max (mapcat vals (:bonuses s)))))))&quot;, :offset 562, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         (when-let [bonuses (seq (mapcat vals (:bonuses s)))]\n           (&gt; (count (:rolls s)) (apply max bonuses))))))&quot;, :offset 608, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state \n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    score\n    )&quot;, :offset 202, :ns &quot;tenpin.core&quot;} {:command &quot;(game-complete? res)&quot;, :offset 20, :ns &quot;tenpin.core&quot;} {:command &quot;res&quot;, :offset 3, :ns &quot;tenpin.core&quot;} {:command &quot;(def res *1)&quot;, :offset 12, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         \n         \n         (let [bonuses (mapcat vals (:bonuses s))]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 654, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         \n         \n         (let [bonuses (mapcat vals (:bonuses s))\n               (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 693, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         \n         \n         (let [bonuses (mapcat vals (:bonuses s))\n               (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 709, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n\n\n         (let [bonuses (mapcat vals (:bonuses s))\n               _ (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 693, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    ;(roll 10)\n    ;(roll 10)\n    )&quot;, :offset 193, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)\n        \n        (prn {:frames frames :extras extras})]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 716, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)\n        \n        _ (prn {:frames frames :extras extras})]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 718, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n(prn (count frames))\n(prn (peek frames))\n;(prn \&quot;bonuses\&quot; (:bonuses s))\n;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n\n\n         (let [bonuses (mapcat vals (:bonuses s))\n               _ (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 694, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n    (prn (= (count frames) 10))\n    (prn (or (= [10] (peek frames))\n             (= 2 (count (peek frames)))))\n    (let [bonuses (mapcat vals (:bonuses s))\n          _ (prn \&quot;bonuses\&quot; bonuses)]\n      (or (empty? bonuses)\n          (&gt; (count (:rolls s)) (apply max bonuses))))\n    ;(prn \&quot;bonuses\&quot; (:bonuses s))\n    ;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n\n\n         (let [bonuses (mapcat vals (:bonuses s))\n               _ (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 936, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n    (prn (= (count frames) 10))\n    (prn (or (= [10] (peek frames))\n             (= 2 (count (peek frames)))))\n    (prn \&quot;yo\&quot; (:bonuses s))\n    (prn \&quot;yo\&quot; (mapcat vals (:bonuses s)))\n    (let [bonuses (mapcat vals (:bonuses s))\n          _ (prn \&quot;bonuses\&quot; bonuses)]\n      (or (empty? bonuses)\n          (&gt; (count (:rolls s)) (apply max bonuses))))\n    ;(prn \&quot;bonuses\&quot; (:bonuses s))\n    ;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n\n\n         (let [bonuses (mapcat vals (:bonuses s))\n               _ (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 1006, :ns &quot;tenpin.core&quot;} {:command &quot;(mapcat vals {0 [1 2]})&quot;, :offset 23, :ns &quot;tenpin.core&quot;} {:command &quot;(mapcat val {0 [1 2]})&quot;, :offset 22, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n    (prn (= (count frames) 10))\n    (prn (or (= [10] (peek frames))\n             (= 2 (count (peek frames)))))\n    (prn \&quot;yo\&quot; (:bonuses s))\n    (prn \&quot;yo\&quot; (mapcat val (:bonuses s)))\n    (let [bonuses (mapcat val (:bonuses s))\n          _ (prn \&quot;bonuses\&quot; bonuses)]\n      (or (empty? bonuses)\n          (&gt; (count (:rolls s)) (apply max bonuses))))\n    ;(prn \&quot;bonuses\&quot; (:bonuses s))\n    ;(prn (count (:rolls s)) (apply max (mapcat vals (:bonuses s))))\n    (and (= (count frames) 10)\n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n\n\n         (let [bonuses (mapcat val (:bonuses s))\n               _ (prn \&quot;bonuses\&quot; bonuses)]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 1003, :ns &quot;tenpin.core&quot;} {:command &quot;(and true nil)&quot;, :offset 14, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n    (and (= (count frames) 10)\n         \n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         \n         (let [bonuses (mapcat val (:bonuses s))]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 518, :ns &quot;tenpin.core&quot;} {:command &quot;(defn game-complete?\n  \&quot;Checks whether a game has finished. In particular, we expect 10 frames to have been played,\n  along with any bonus rolls required to satisfy any strikes/spares.\&quot;\n  [s]\n  (prn \&quot;SSS\&quot; s)\n  (let [{:keys [frames]} (rolls-&gt;frames (:rolls s))]\n    (and (= (count frames) 10)\n         \n         (or (= [10] (peek frames))\n             (= 2 (count (peek frames))))\n         \n         (let [bonuses (mapcat val (:bonuses s))]\n           (or (empty? bonuses)\n               (&gt; (count (:rolls s)) (apply max bonuses)))))))&quot;, :offset 534, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    ;(roll 10)\n    )&quot;, :offset 192, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    )&quot;, :offset 191, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    )&quot;, :offset 205, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  [s]\n  #_{:pre [(game-complete? s)]}\n  (prn \&quot;SCORE\&quot; (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res))))))\n  (prn \&quot;SCORE\&quot; (-&gt;&gt; (:bonuses s)\n                    (mapcat (fn [[_ rolls]] rolls))\n                    (map #(get (:rolls s) %))\n                    (apply +)))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 492, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  [s]\n  #_{:pre [(game-complete? s)]}\n  (prn \&quot;SCORE\&quot; (:frames (rolls-&gt;frames (:rolls res))))\n  (prn \&quot;SCORE\&quot; (-&gt;&gt; (:bonuses s)\n                    (mapcat (fn [[_ rolls]] rolls))\n                    (map #(get (:rolls s) %))\n                    (apply +)))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 464, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  [s]\n  #_{:pre [(game-complete? s)]}\n  (prn \&quot;SCORE\&quot; (:frames (rolls-&gt;frames (:rolls s))))\n  (prn \&quot;SCORE\&quot; (-&gt;&gt; (:bonuses s)\n                    (mapcat (fn [[_ rolls]] rolls))\n                    (map #(get (:rolls s) %))\n                    (apply +)))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls res)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 462, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  [s]\n  #_{:pre [(game-complete? s)]}\n  (prn \&quot;SCORE\&quot; (:frames (rolls-&gt;frames (:rolls s))))\n  (prn \&quot;SCORE\&quot; (-&gt;&gt; (:bonuses s)\n                    (mapcat (fn [[_ rolls]] rolls))\n                    (map #(get (:rolls s) %))\n                    (apply +)))\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls s)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 460, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  [s]\n  {:pre [(game-complete? s)]}\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls s)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 242, :ns &quot;tenpin.core&quot;} {:command &quot;(-&gt; initial-state\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    (roll 10)\n    score\n    )&quot;, :offset 201, :ns &quot;tenpin.core&quot;} {:command &quot;(deftest test-rolls-&gt;frames\n  (testing \&quot;adds frames\&quot;\n    (is (= {:frames [[1]]} (rolls-&gt;frames [1])))\n    (is (= {:frames [[1 2]]} (rolls-&gt;frames [1 2])))\n    (is (= {:frames [[1 2] [3]]} (rolls-&gt;frames [1 2 3])))\n    (is (= {:frames [[1 2] [3 4]]} (rolls-&gt;frames [1 2 3 4])))\n    (is (= {:frames [[0]]} (rolls-&gt;frames [0])))\n    (is (= {:frames [[0 1]]} (rolls-&gt;frames [0 1])))\n\n\n    )\n  )&quot;, :offset 390, :ns &quot;tenpin.core-test&quot;} {:command &quot;(deftest test-game-complete?\n  (testing \&quot;without bonus points\&quot;\n    (is (false? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1]})))\n    (is (true? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1]}))))\n\n  (testing \&quot;spare at the end needs one more roll\&quot;\n    (is (false? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 9 1]})))\n    (is (true? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 9 1 , 1]})))))&quot;, :offset 493, :ns &quot;tenpin.core-test&quot;} {:command &quot;(deftest test-game-complete?\n  (testing \&quot;without bonus points\&quot;\n    (is (false? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1]})))\n    (is (true? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1]}))))\n\n  (testing \&quot;spare at the end needs one more roll\&quot;\n    (is (false? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 9 1]})))\n    (is (true? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 9 1 , 1]}))))\n\n  (testing \&quot;strike at the end needs two more rolls\&quot;\n    (is (false? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 10]})))\n    (is (true? (game-complete? {:rolls [1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 1 1, 10, 1 1]})))))&quot;, :offset 739, :ns &quot;tenpin.core-test&quot;} {:command &quot;(repeat 10 10)&quot;, :offset 14, :ns &quot;tenpin.core-test&quot;} {:command &quot;(reduce (fn [acc n] (roll acc n)) initial-state (repeat 10 10))&quot;, :offset 63, :ns &quot;tenpin.core-test&quot;} {:command &quot;(defn score\n  \&quot;Given a game state `s`, computes the total score.\n\n  Throws an error if the game is not yet complete.\&quot;\n  [s]\n  ;{:pre [(game-complete? s)]}\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls s)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) %))\n          (apply +))))&quot;, :offset 349, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  \&quot;Given a game state `s`, computes the total score.\n\n  Throws an error if the game is not yet complete.\&quot;\n  [s]\n  ;{:pre [(game-complete? s)]}\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls s)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) % 0))\n          (apply +))))&quot;, :offset 351, :ns &quot;tenpin.core&quot;} {:command &quot;(defn score\n  \&quot;Given a game state `s`, computes the total score.\n\n  Throws an error if the game is not yet complete.\&quot;\n  [s]\n  ;{:pre [(game-complete? s)]}\n  (prn \&quot;S\&quot; s)\n  (+ (apply + (mapcat identity (:frames (rolls-&gt;frames (:rolls s)))))\n\n     (-&gt;&gt; (:bonuses s)\n          (mapcat (fn [[_ rolls]] rolls))\n          (map #(get (:rolls s) % 0))\n          (apply +))))&quot;, :offset 365, :ns &quot;tenpin.core&quot;} {:command &quot;(score (reduce (fn [acc n] (roll acc n)) initial-state (repeat 11 10)))&quot;, :offset 71, :ns &quot;tenpin.core&quot;} {:command &quot;(score (reduce (fn [acc n] (roll acc n)) initial-state (repeat 10 10)))&quot;, :offset 71, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))\n         (pos-int? n)\n         (&lt;= 0 n 10)]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 704, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))\n         (int? n)\n         (&lt;= 0 n 10)]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 700, :ns &quot;tenpin.core&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))\n         (&lt;= 0 n 10)]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 682, :ns &quot;tenpin.core&quot;} {:command &quot;(int? 7)&quot;, :offset 8, :ns &quot;tenpin.core-test&quot;} {:command &quot;(defn roll\n  \&quot;Given state `s` and a roll scoring `n`, returns the next state.\n\n  Throws an error if game is already complete.\&quot;\n  [s n]\n  {:pre [(not (game-complete? s))\n         (nat-int? n)\n         (&lt;= 0 n 10)]}\n  (let [{:keys [frames extras]} (rolls-&gt;frames (conj (:rolls s) n))\n        current-frame (dec (count frames))\n        s' (update s :rolls conj n)]\n\n    (cond\n      ; Past the last frame\n      (seq extras)\n      s'\n\n      ; Strike\n      (= [10] (peek frames))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s')) (inc (count (:rolls s')))])\n\n      ; Spare\n      (= 10 (apply + (peek frames)))\n      (assoc-in s' [:bonuses current-frame] [(count (:rolls s'))])\n\n      :else s')))&quot;, :offset 704, :ns &quot;tenpin.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for tenpin" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="tenpin" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c63a6c58-4654-4cb8-a6dd-918d5b3c287d" name="Default Changelist" comment="" />
      <created>1568723627112</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1568723627112</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="72" y="23" width="1608" height="1027" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info id="Image Layers" />
      <window_info id="Designer" />
      <window_info id="UI Designer" />
      <window_info id="Capture Tool" />
      <window_info id="Favorites" side_tool="true" />
      <window_info content_ui="combo" id="Project" order="0" weight="0.18199234" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="bottom" id="Elm Compiler" />
      <window_info anchor="bottom" id="Version Control" />
      <window_info anchor="bottom" id="Terminal" weight="0.32941177" />
      <window_info anchor="bottom" id="Event Log" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="right" id="Palette" />
      <window_info anchor="right" id="REPL" side_tool="true" weight="0.32950193" />
      <window_info anchor="right" id="Theme Preview" />
      <window_info anchor="right" id="Maven" />
      <window_info anchor="right" id="Elm" />
      <window_info anchor="right" id="Leiningen" weight="0.32950193" />
      <window_info anchor="right" id="Capture Analysis" />
      <window_info anchor="right" id="Palette&#9;" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/.hgignore">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="150">
          <caret line="10" column="2" selection-start-line="10" selection-start-column="2" selection-end-line="10" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="5" column="45" selection-start-line="5" selection-start-column="45" selection-end-line="5" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tenpin/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="190">
          <caret line="40" lean-forward="true" selection-start-line="40" selection-end-line="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="495">
            <caret line="43" column="1" lean-forward="true" selection-start-line="43" selection-start-column="1" selection-end-line="43" selection-end-column="1" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tenpin/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="730">
          <caret line="85" column="59" lean-forward="true" selection-start-line="85" selection-start-column="59" selection-end-line="85" selection-end-column="59" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>10</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>